// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Brands.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.ToTable("brands", "public");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.ToTable("product", "public");
                });

            modelBuilder.Entity("Domain.Products.ProductDetail", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<float>("Measure")
                        .HasColumnType("real")
                        .HasColumnName("measure");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_unit_id");

                    b.HasKey("ProductId")
                        .HasName("pk_product_detail");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_product_detail_brand_id");

                    b.HasIndex("MeasureUnitId")
                        .HasDatabaseName("ix_product_detail_measure_unit_id");

                    b.ToTable("product_detail", "public");
                });

            modelBuilder.Entity("Domain.Products.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("ValidFromTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from_time");

                    b.Property<DateTime>("ValidToTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_to_time");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_price");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_price_product_id");

                    b.ToTable("product_price", "public");
                });

            modelBuilder.Entity("Domain.Products.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("pk_product_tags");

                    b.ToTable("product_tags", "public");
                });

            modelBuilder.Entity("Domain.Products.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("pk_product_units");

                    b.ToTable("product_units", "public");
                });

            modelBuilder.Entity("Domain.Purchases.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("OccurenceTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurence_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_purchase");

                    b.ToTable("purchase", "public");
                });

            modelBuilder.Entity("Domain.Purchases.PurchaseProductEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uuid")
                        .HasColumnName("price_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_purchase_product_entry");

                    b.HasIndex("PriceId")
                        .HasDatabaseName("ix_purchase_product_entry_price_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_purchase_product_entry_product_id");

                    b.HasIndex("PurchaseId")
                        .HasDatabaseName("ix_purchase_product_entry_purchase_id");

                    b.ToTable("purchase_product_entry", "public");
                });

            modelBuilder.Entity("Domain.Purchases.PurchaseTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("pk_purchase_tags");

                    b.ToTable("purchase_tags", "public");
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", "public");
                });

            modelBuilder.Entity("Domain.Roles.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", "public");
                });

            modelBuilder.Entity("Domain.Sales.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_time");

                    b.Property<DateTime>("OccurenceTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurence_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_sale");

                    b.ToTable("sale", "public");
                });

            modelBuilder.Entity("Domain.Sales.SaleProductEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uuid")
                        .HasColumnName("price_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_id");

                    b.HasKey("Id")
                        .HasName("pk_sale_product_entry");

                    b.HasIndex("PriceId")
                        .HasDatabaseName("ix_sale_product_entry_price_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_sale_product_entry_product_id");

                    b.HasIndex("SaleId")
                        .HasDatabaseName("ix_sale_product_entry_sale_id");

                    b.ToTable("sale_product_entry", "public");
                });

            modelBuilder.Entity("Domain.Sales.SaleTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("pk_sale_tags");

                    b.ToTable("sale_tags", "public");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("products_id");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_id");

                    b.HasKey("ProductsId", "TagsId")
                        .HasName("pk_product_product_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_product_product_tag_tags_id");

                    b.ToTable("product_product_tag", "public");
                });

            modelBuilder.Entity("PurchasePurchaseTag", b =>
                {
                    b.Property<Guid>("PurchasesId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchases_id");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_id");

                    b.HasKey("PurchasesId", "TagsId")
                        .HasName("pk_purchase_purchase_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_purchase_purchase_tag_tags_id");

                    b.ToTable("purchase_purchase_tag", "public");
                });

            modelBuilder.Entity("SaleSaleTag", b =>
                {
                    b.Property<Guid>("SaleId")
                        .HasColumnType("uuid")
                        .HasColumnName("sale_id");

                    b.Property<int>("TagsId")
                        .HasColumnType("integer")
                        .HasColumnName("tags_id");

                    b.HasKey("SaleId", "TagsId")
                        .HasName("pk_sale_sale_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_sale_sale_tag_tags_id");

                    b.ToTable("sale_sale_tag", "public");
                });

            modelBuilder.Entity("Domain.Products.ProductDetail", b =>
                {
                    b.HasOne("Domain.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_detail_brands_brand_id");

                    b.HasOne("Domain.Products.ProductUnit", "MeasureUnit")
                        .WithMany("Products")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_detail_product_units_measure_unit_id");

                    b.HasOne("Domain.Products.Product", "Product")
                        .WithOne("Detail")
                        .HasForeignKey("Domain.Products.ProductDetail", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_detail_products_product_id");

                    b.Navigation("Brand");

                    b.Navigation("MeasureUnit");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Products.ProductPrice", b =>
                {
                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany("Prices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_price_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Products.ProductTag", b =>
                {
                    b.OwnsOne("Domain.Common.Name", "Name", b1 =>
                        {
                            b1.Property<int>("ProductTagId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("normalized_name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("ProductTagId");

                            b1.HasIndex("Normalized")
                                .HasDatabaseName("ix_product_tags_normalized_name");

                            b1.ToTable("product_tags", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProductTagId")
                                .HasConstraintName("fk_product_tags_product_tags_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Products.ProductUnit", b =>
                {
                    b.OwnsOne("Domain.Common.Name", "Name", b1 =>
                        {
                            b1.Property<int>("ProductUnitId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("normalized_name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("ProductUnitId");

                            b1.HasIndex("Normalized")
                                .HasDatabaseName("ix_product_units_normalized_name");

                            b1.ToTable("product_units", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProductUnitId")
                                .HasConstraintName("fk_product_units_product_units_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Purchases.PurchaseProductEntry", b =>
                {
                    b.HasOne("Domain.Products.ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_product_entry_product_price_price_id");

                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_product_entry_products_product_id");

                    b.HasOne("Domain.Purchases.Purchase", "Purchase")
                        .WithMany("Products")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_product_entry_purchases_purchase_id");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Domain.Purchases.PurchaseTag", b =>
                {
                    b.OwnsOne("Domain.Common.Name", "Name", b1 =>
                        {
                            b1.Property<int>("PurchaseTagId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("normalized_name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("PurchaseTagId");

                            b1.HasIndex("Normalized")
                                .HasDatabaseName("ix_purchase_tags_normalized_name");

                            b1.ToTable("purchase_tags", "public");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseTagId")
                                .HasConstraintName("fk_purchase_tags_purchase_tags_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.OwnsOne("Domain.Common.Name", "Name", b1 =>
                        {
                            b1.Property<int>("RoleId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("normalized_name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("RoleId");

                            b1.HasIndex("Normalized")
                                .HasDatabaseName("ix_role_normalized_name");

                            b1.ToTable("role", "public");

                            b1.WithOwner()
                                .HasForeignKey("RoleId")
                                .HasConstraintName("fk_role_role_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Roles.UserRole", b =>
                {
                    b.HasOne("Domain.Roles.Role", "Role")
                        .WithOne()
                        .HasForeignKey("Domain.Roles.UserRole", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Roles.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Sales.SaleProductEntry", b =>
                {
                    b.HasOne("Domain.Products.ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sale_product_entry_product_price_price_id");

                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_sale_product_entry_products_product_id");

                    b.HasOne("Domain.Sales.Sale", "Sale")
                        .WithMany("Products")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_product_entry_sales_sale_id");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Domain.Sales.SaleTag", b =>
                {
                    b.OwnsOne("Domain.Common.Name", "Name", b1 =>
                        {
                            b1.Property<int>("SaleTagId")
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            b1.Property<string>("Normalized")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("normalized_name");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("name");

                            b1.HasKey("SaleTagId");

                            b1.HasIndex("Normalized")
                                .HasDatabaseName("ix_sale_tags_normalized_name");

                            b1.ToTable("sale_tags", "public");

                            b1.WithOwner()
                                .HasForeignKey("SaleTagId")
                                .HasConstraintName("fk_sale_tags_sale_tags_id");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.OwnsOne("Domain.Users.UserName", "Names", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("First")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("Last")
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.HasKey("UserId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("Names");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_tag_products_products_id");

                    b.HasOne("Domain.Products.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_tag_product_tags_tags_id");
                });

            modelBuilder.Entity("PurchasePurchaseTag", b =>
                {
                    b.HasOne("Domain.Purchases.Purchase", null)
                        .WithMany()
                        .HasForeignKey("PurchasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_purchase_tag_purchases_purchases_id");

                    b.HasOne("Domain.Purchases.PurchaseTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_purchase_purchase_tag_purchase_tags_tags_id");
                });

            modelBuilder.Entity("SaleSaleTag", b =>
                {
                    b.HasOne("Domain.Sales.Sale", null)
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_sale_tag_sales_sale_id");

                    b.HasOne("Domain.Sales.SaleTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sale_sale_tag_sale_tags_tags_id");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Navigation("Detail")
                        .IsRequired();

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Domain.Products.ProductUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Purchases.Purchase", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Sales.Sale", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
